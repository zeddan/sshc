#!/usr/bin/env ruby

DIR_PATH      = File.expand_path("~/.config/sshc")
INST_PATH     = File.expand_path("~/.config/sshc/instances")
TMP_INST_PATH = File.expand_path("~/.config/sshc/instances_tmp")

unless Dir.exist?(DIR_PATH) && File.file?(INST_PATH)
  system 'mkdir', '-p', DIR_PATH
  File.new(INST_PATH, "w")
end

def connect
  server = select_instance
  puts "\nssh #{server[1]}@#{server[2]}"
  exec "ssh #{server[1]}@#{server[2]}"
end

def add_instance(name = "", user = "", ip = "")
  name = prompt_add(name, "Name")
  user = prompt_add(user, "User")
  ip = prompt_add(ip, "IP")

  print "Add #{name} for #{user}@#{ip}? (Y/n) "

  confirm = STDIN.gets.chomp.downcase
  case
  when confirm == "y", confirm.empty?
    puts "OK!"
    File.open(INST_PATH, 'a') { |f| f << "#{name},#{user},#{ip}\n" }
  when confirm == "n"
    add_instance(name, user, ip)
  end
rescue Interrupt
  exit
end

def list
  servers = load_servers
  return if servers.nil? || servers.empty?
  widths = [servers.map(&:first).max_by(&:length).length + 2,
            servers.map{|s|s[1]}.max_by(&:length).length + 2]
  pretty_print("NAME", "USER", "IP", widths)
  servers.each do |s|
    pretty_print(s[0], s[1], s[2], widths)
  end
end

def remove_instance
  server = select_instance
  File.open(TMP_INST_PATH, 'w') do |out_file|
    File.foreach(INST_PATH) do |line|
      out_file.puts line unless line.strip == server.join(",")
    end
  end
  File.rename(TMP_INST_PATH, INST_PATH)
end

def select_instance
  servers = load_servers

  puts "Select instance:\n\n"
  servers.each.with_index(1) do |server, idx|
    puts "#{idx}) #{server.first}"
  end
  print "\n> "

  choice = STDIN.gets.to_i
  exit unless choice.between?(1, servers.size)
  servers[choice - 1]
rescue Interrupt
  exit
end

def load_servers
  File.open(INST_PATH, 'r') { |f| f.map(&:strip) }.map { |s| s.split(",") }
end

def prompt_add(value, string)
  print value.empty? ? "#{string}: " : "#{string} (#{value}): "
  tmp_value = STDIN.gets.chomp 
  tmp_value.empty? ? value : tmp_value
end

def pretty_print(name, user, ip, widths)
  printf "%-#{widths[0]}s %-#{widths[1]}s %s\n", name, user, ip
end

case ARGV.first
when "add"
  add_instance
  exit
when "list", "ls"
  list
  exit
when "remove", "rm"
  remove_instance
  exit
end

connect

