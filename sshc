#!/usr/bin/env ruby

DIR_PATH      = File.expand_path("~/.config/sshc")
INST_PATH     = File.expand_path("~/.config/sshc/instances")
TMP_INST_PATH = File.expand_path("~/.config/sshc/instances_tmp")

unless Dir.exist?(DIR_PATH) && File.file?(INST_PATH)
  system "mkdir", "-p", DIR_PATH
  File.new(INST_PATH, "w")
end

def connect
  server = select_instance
  puts "\nssh #{server[1]}@#{server[2]}"
  exec "ssh", "#{server[1]}@#{server[2]}"
end

def add_instance
  server = prompt_instance_info
  append_to_file(server)
  puts "OK!"
end

def edit_instance
  server = select_instance
  edited_server = prompt_instance_info(server[0], server[1], server[2])
  edit_in_file(server, edited_server)
  puts "OK!"
end

def list_instances
  servers = load_servers
  return if servers.nil? || servers.empty?

  widths = [servers.map(&:first).max_by(&:length).length + 2,
            servers.map{|s|s[1]}.max_by(&:length).length + 2]
  pretty_print("NAME", "USER", "IP", widths)
  servers.each do |s|
    pretty_print(s[0], s[1], s[2], widths)
  end
end

def remove_instance
  server = select_instance
  File.open(TMP_INST_PATH, "w") do |out_file|
    File.foreach(INST_PATH) do |line|
      out_file.puts line unless line.strip == server.join(",")
    end
  end
  File.rename(TMP_INST_PATH, INST_PATH)
  puts "OK!"
end

def select_instance
  servers = load_servers

  puts "Select instance:\n\n"
  servers.each.with_index(1) do |server, idx|
    puts "#{idx}) #{server.first}"
  end
  print "\n> "

  choice = $stdin.gets.to_i
  exit unless choice.between?(1, servers.size)
  servers[choice - 1]
rescue Interrupt
  exit
end

def prompt_instance_info(name = "", user = "", ip = "")
  name = prompt_value(name, "Name")
  user = prompt_value(user, "User")
  ip = prompt_value(ip, "IP")

  print "Add #{name} for #{user}@#{ip}? (Y/n) "

  confirm = $stdin.gets.chomp.downcase
  case confirm
  when "y", ""
    return "#{name},#{user},#{ip}"
  when "n"
    prompt_instance_info(name, user, ip)
  end
rescue Interrupt
  exit
end

def load_servers
  File.open(INST_PATH, "r") { |f| f.map { |line| line.strip.split(",") } }
end

def append_to_file(server)
  File.open(INST_PATH, "a") { |f| f << "#{server}\n" }
end

def edit_in_file(previous_server, edited_server)
  servers = File.readlines(INST_PATH)
  File.open(INST_PATH, "w") do |out_file|
    servers.each do |server|
      if server.strip == previous_server.join(",")
        out_file.puts edited_server
      else
        out_file.puts server
      end
    end
  end
end

def prompt_value(value, key)
  print value.empty? ? "#{key}: " : "#{key} (#{value}): "
  input_value = $stdin.gets.chomp
  input_value.empty? ? value : input_value
end

def pretty_print(name, user, ip, widths)
  printf "%-#{widths[0]}s %-#{widths[1]}s %s\n", name, user, ip
end

case ARGV.first
when "add"
  add_instance
  exit
when "edit"
  edit_instance
  exit
when "list", "ls"
  list_instances
  exit
when "remove", "rm"
  remove_instance
  exit
end

connect
