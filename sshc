#!/usr/bin/env ruby

DIR_PATH = File.expand_path("~/.config/sshc")
INSTANCE_PATH = File.expand_path("~/.config/sshc/servers")

unless Dir.exist?(DIR_PATH) && File.file?(INSTANCE_PATH)
  system "mkdir", "-p", DIR_PATH
  File.new(INSTANCE_PATH, "w")
end

def connect
  server = select_server

  if server[:port] == "22"
    puts "\nssh #{server[:user]}@#{server[:ip]}"
    exec "ssh", "#{server[:user]}@#{server[:ip]}"
  else
    puts "\nssh -p #{server[:port]} #{server[:user]}@#{server[:ip]}"
    exec "ssh", "-p", server[:port], "#{server[:user]}@#{server[:ip]}"
  end
end

def add_server
  server = prompt_server_info
  append_to_file(server)
  puts "OK!"
end

def edit_server
  server = select_server
  edited_server = prompt_server_info(
    server[:name],
    server[:user],
    server[:ip],
    server[:port]
  )
  edit_in_file(server, edited_server)
  puts "OK!"
end

def list_servers
  servers = load_servers
  return if servers.nil? || servers.empty?

  widths = [widest_column_width(servers.map { |s| s[:name] }),
            widest_column_width(servers.map { |s| s[:user] }),
            widest_column_width(servers.map { |s| s[:ip] })]
  pretty_print("NAME", "USER", "IP", "PORT", widths)
  servers.each do |s|
    pretty_print(s[:name], s[:user], s[:ip], s[:port], widths)
  end
end

def remove_server
  server_to_remove = select_server
  servers = File.readlines(INSTANCE_PATH)
  File.open(INSTANCE_PATH, "w") do |out_file|
    servers.each do |server|
      unless server_to_remove == csv_to_hash(server.strip.split(","))
        out_file.puts server
      end
    end
  end
  puts "OK!"
end

def select_server
  servers = load_servers

  puts "Select server:\n\n"
  servers.each.with_index(1) do |server, idx|
    puts "#{idx}) #{server[:name]}"
  end
  print "\n> "

  choice = $stdin.gets.to_i
  exit unless choice.between?(1, servers.size)
  servers[choice - 1]
rescue Interrupt
  exit
end

def prompt_server_info(name = "", user = "", ip = "", port = "22")
  name = prompt_value("Name", name)
  user = prompt_value("User", user)
  ip = prompt_value("IP", ip)
  port = prompt_value("Port", port)

  print "Add #{name} for #{user}@#{ip}:#{port}? (Y/n) "

  confirm = $stdin.gets.chomp.downcase
  case confirm
  when "y", ""
    return "#{name},#{user},#{ip},#{port}"
  when "n"
    prompt_server_info(name, user, ip, port)
  end
rescue Interrupt
  exit
end

def load_servers
  File.open(INSTANCE_PATH, "r") do |file|
    file.map do |line|
      csv_to_hash(line.strip.split(","))
    end
  end
end

def csv_to_hash(server)
  {
    name: server[0],
    user: server[1],
    ip: server[2],
    port: server[3]
  }
end

def widest_column_width(values)
  values.max_by(&:length).length + 2
end

def append_to_file(server)
  File.open(INSTANCE_PATH, "a") { |f| f << "#{server}\n" }
end

def edit_in_file(previous_server, edited_server)
  servers = File.readlines(INSTANCE_PATH)
  File.open(INSTANCE_PATH, "w") do |out_file|
    servers.each do |server|
      if previous_server == csv_to_hash(server.strip.split(","))
        out_file.puts edited_server
      else
        out_file.puts server
      end
    end
  end
end

def prompt_value(key, value)
  print value.empty? ? "#{key}: " : "#{key} (#{value}): "
  input_value = $stdin.gets.chomp
  input_value.empty? ? value : input_value
end

def pretty_print(name, user, ip, port, widths)
  printf "%-#{widths[0]}s %-#{widths[1]}s %-#{widths[2]}s %s\n", name, user, ip, port
end

case ARGV.first
when nil
  connect
  exit
when "add"
  add_server
  exit
when "edit"
  edit_server
  exit
when "list", "ls"
  list_servers
  exit
when "remove", "rm"
  remove_server
  exit
else
  puts "sshc: command not found: #{ARGV.first}"
  exit 1
end

